//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Creations = newCreationsTable("public", "creations", "")

type creationsTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnString
	Name             postgres.ColumnString
	CreatorID        postgres.ColumnString
	InstructionsLink postgres.ColumnString
	ImageID          postgres.ColumnString
	Price            postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CreationsTable struct {
	creationsTable

	EXCLUDED creationsTable
}

// AS creates new CreationsTable with assigned alias
func (a CreationsTable) AS(alias string) *CreationsTable {
	return newCreationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CreationsTable with assigned schema name
func (a CreationsTable) FromSchema(schemaName string) *CreationsTable {
	return newCreationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CreationsTable with assigned table prefix
func (a CreationsTable) WithPrefix(prefix string) *CreationsTable {
	return newCreationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CreationsTable with assigned table suffix
func (a CreationsTable) WithSuffix(suffix string) *CreationsTable {
	return newCreationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCreationsTable(schemaName, tableName, alias string) *CreationsTable {
	return &CreationsTable{
		creationsTable: newCreationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newCreationsTableImpl("", "excluded", ""),
	}
}

func newCreationsTableImpl(schemaName, tableName, alias string) creationsTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		NameColumn             = postgres.StringColumn("name")
		CreatorIDColumn        = postgres.StringColumn("creator_id")
		InstructionsLinkColumn = postgres.StringColumn("instructions_link")
		ImageIDColumn          = postgres.StringColumn("image_id")
		PriceColumn            = postgres.FloatColumn("price")
		allColumns             = postgres.ColumnList{IDColumn, NameColumn, CreatorIDColumn, InstructionsLinkColumn, ImageIDColumn, PriceColumn}
		mutableColumns         = postgres.ColumnList{NameColumn, CreatorIDColumn, InstructionsLinkColumn, ImageIDColumn, PriceColumn}
	)

	return creationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Name:             NameColumn,
		CreatorID:        CreatorIDColumn,
		InstructionsLink: InstructionsLinkColumn,
		ImageID:          ImageIDColumn,
		Price:            PriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
