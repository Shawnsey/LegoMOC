//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LineItems = newLineItemsTable("public", "line_items", "")

type lineItemsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreationID postgres.ColumnInteger
	Quantity   postgres.ColumnInteger
	Price      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LineItemsTable struct {
	lineItemsTable

	EXCLUDED lineItemsTable
}

// AS creates new LineItemsTable with assigned alias
func (a LineItemsTable) AS(alias string) *LineItemsTable {
	return newLineItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LineItemsTable with assigned schema name
func (a LineItemsTable) FromSchema(schemaName string) *LineItemsTable {
	return newLineItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LineItemsTable with assigned table prefix
func (a LineItemsTable) WithPrefix(prefix string) *LineItemsTable {
	return newLineItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LineItemsTable with assigned table suffix
func (a LineItemsTable) WithSuffix(suffix string) *LineItemsTable {
	return newLineItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLineItemsTable(schemaName, tableName, alias string) *LineItemsTable {
	return &LineItemsTable{
		lineItemsTable: newLineItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newLineItemsTableImpl("", "excluded", ""),
	}
}

func newLineItemsTableImpl(schemaName, tableName, alias string) lineItemsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreationIDColumn = postgres.IntegerColumn("creation_id")
		QuantityColumn   = postgres.IntegerColumn("quantity")
		PriceColumn      = postgres.IntegerColumn("price")
		allColumns       = postgres.ColumnList{IDColumn, CreationIDColumn, QuantityColumn, PriceColumn}
		mutableColumns   = postgres.ColumnList{CreationIDColumn, QuantityColumn, PriceColumn}
	)

	return lineItemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreationID: CreationIDColumn,
		Quantity:   QuantityColumn,
		Price:      PriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
