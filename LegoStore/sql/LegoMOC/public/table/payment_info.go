//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PaymentInfo = newPaymentInfoTable("public", "payment_info", "")

type paymentInfoTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnString
	UserID              postgres.ColumnString
	CreditcardType      postgres.ColumnString
	EncryptedCardNumber postgres.ColumnFloat
	Expiration          postgres.ColumnString
	SecurityCode        postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PaymentInfoTable struct {
	paymentInfoTable

	EXCLUDED paymentInfoTable
}

// AS creates new PaymentInfoTable with assigned alias
func (a PaymentInfoTable) AS(alias string) *PaymentInfoTable {
	return newPaymentInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PaymentInfoTable with assigned schema name
func (a PaymentInfoTable) FromSchema(schemaName string) *PaymentInfoTable {
	return newPaymentInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PaymentInfoTable with assigned table prefix
func (a PaymentInfoTable) WithPrefix(prefix string) *PaymentInfoTable {
	return newPaymentInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PaymentInfoTable with assigned table suffix
func (a PaymentInfoTable) WithSuffix(suffix string) *PaymentInfoTable {
	return newPaymentInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPaymentInfoTable(schemaName, tableName, alias string) *PaymentInfoTable {
	return &PaymentInfoTable{
		paymentInfoTable: newPaymentInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newPaymentInfoTableImpl("", "excluded", ""),
	}
}

func newPaymentInfoTableImpl(schemaName, tableName, alias string) paymentInfoTable {
	var (
		IDColumn                  = postgres.StringColumn("id")
		UserIDColumn              = postgres.StringColumn("user_id")
		CreditcardTypeColumn      = postgres.StringColumn("creditcard_type")
		EncryptedCardNumberColumn = postgres.FloatColumn("encrypted_card_number")
		ExpirationColumn          = postgres.StringColumn("expiration")
		SecurityCodeColumn        = postgres.FloatColumn("security_code")
		allColumns                = postgres.ColumnList{IDColumn, UserIDColumn, CreditcardTypeColumn, EncryptedCardNumberColumn, ExpirationColumn, SecurityCodeColumn}
		mutableColumns            = postgres.ColumnList{UserIDColumn, CreditcardTypeColumn, EncryptedCardNumberColumn, ExpirationColumn, SecurityCodeColumn}
	)

	return paymentInfoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		UserID:              UserIDColumn,
		CreditcardType:      CreditcardTypeColumn,
		EncryptedCardNumber: EncryptedCardNumberColumn,
		Expiration:          ExpirationColumn,
		SecurityCode:        SecurityCodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
